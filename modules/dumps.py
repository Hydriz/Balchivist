#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright (C) 2015 Hydriz Scholz
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

import datetime
import os
import re
import time
import urllib

import balchivist


class BALMDumps(object):
    def __init__(self, params={}, sqldb=None):
        """
        This module is for archiving the main database dumps provided by the
        Wikimedia Foundation (available at <https://dumps.wikimedia.org>) to
        the Internet Archive.

        - params (dict): Information about what is to be done about a given
        item. For this module, "resume", "verbose" and "debug" are necessary.
        - sqldb (object): A call to the BALSqlDb class with the required
        parameters.
        """
        self.title = "Wikimedia database dump of %s on %s"
        self.desc = "This is the full database dump of %s that is "
        self.desc += "generated by the Wikimedia Foundation on %s."
        self.subject = "wiki;dumps;data dumps;%s;%s;%s"
        # A size hint for the Internet Archive, currently set at 100GB
        self.sizehint = "107374182400"

        self.config = balchivist.BALConfig('dumps')
        self.resume = params['resume']
        self.verbose = params['verbose']
        self.debug = params['debug']
        self.sqldb = sqldb

        self.common = balchivist.BALCommon(verbose=self.verbose,
                                           debug=self.debug)
        self.jobs = [
            "archive",
            "check",
            "update"
        ]
        # Additional files in each dump
        self.additional = [
            'dumpruninfo.txt',
            'status.html'
        ]

    def getDumpProgress(self, subject, date):
        """
        This function is used to get the progress of a dump.

        - subject (string): The wiki database to check.
        - date (string): The date of the dump in %Y%m%d format.

        Returns: String of either "progress", "done", "error" or "unknown"
        - "progress": The dump is still in progress. There are jobs that are
        still running or waiting to run.
        - "done": The dump is completed successfully.
        - "error": The dump has stopped and have errors in them.
        - "unknown": Unknown status. It is likely that such a dump does not
        exist.
        """
        output = "unknown"
        progress = 0
        done = 0
        statusurl = "%s/%s/%s/dumpruninfo.txt" % (self.config.get('dumps'),
                                                  subject, date)
        f = urllib.urlopen(statusurl)
        raw = f.read()
        f.close()

        regex = r'name:[^;]+; status:(?P<status>[^;]+); updated:'
        m = re.compile(regex).finditer(raw)
        for i in m:
            status = i.group('status')
            if (status == "failed"):
                output = "error"
                return output
            elif (status == "in-progress" or status == "waiting"):
                progress += 1
            elif (status == "done" or status == "skipped"):
                done += 1
            else:
                # Return output in case a new status appears.
                # We do not want to corrupt our database with false entries
                output = "unknown"
                return output
        if (progress > 0):
            output = "progress"
        elif (progress == 0 and done > 0):
            output = "done"
        else:
            output = "unknown"
        return output

    def getDBList(self, dblist):
        """
        This function is used for getting an updated copy of the database
        list from the configuration files website.

        - dblist (string): The name of the dblist file.

        Returns: True if process is successful, False if otherwise.
        """
        dblisturl = self.config.get(dblist.replace(".", ""))
        try:
            urllib.urlretrieve(dblisturl, dblist)
            return True
        except:
            return False

    def getDatabases(self, dblist):
        """
        This function is used to get a list of databases from a dblist file.
        It will also check if the local cache of the dblist file is up-to-date.

        - dblist (string): The name of the dblist file.

        Returns: True if process is successful, False if otherwise.
        """
        if not os.path.exists(dblist):
            self.getDBList(dblist)
        else:
            lastchange = os.path.getctime(dblist)
            now = time.time()
            dayago = now - 60*60*24*1
            if (lastchange < dayago):
                # The dblist cache is more than a day old, update it
                self.getDBList(dblist)
            else:
                pass
        databases = open(dblist, 'r').read().splitlines()
        return sorted(databases)

    def getDumpFiles(self, subject, date):
        """
        This function is used to get a list of dump files from the dumps server
        by using regular expressions.

        - subject (string): The wiki database to get a list of files for.
        - date (string): The date of the dump in %Y%m%d format.

        Returns: List of files.
        """
        dumpfiles = []
        url = "%s/%s/%s/index.html" % (self.config.get('dumps'), subject, date)
        f = urllib.urlopen(url)
        raw = f.read()
        f.close()

        regex = r'<li class=\'file\'><a href="/%s/%s/(?P<dumpfile>[^>]+)">' % (
                subject, date)
        m = re.compile(regex).finditer(raw)
        for i in m:
            dumpfiles.append(i.group('dumpfile'))
        return sorted(dumpfiles + self.additional)

    def getAllDumps(self, subject):
        """
        This function is used to get all dumps in a directory from the dumps
        server by using regular expressions.

        - subject (string): The wiki database to get a list of files for.

        Returns: List of all dumps.
        """
        dumps = []
        url = "%s/%s" % (self.config.get('dumps'), subject)
        f = urllib.urlopen(url)
        raw = f.read()
        f.close()

        regex = r'<a href="(?P<dump>[^>]+)/">'
        m = re.compile(regex).finditer(raw)
        for i in m:
            try:
                datetime.datetime.strptime(i.group('dump'), '%Y%m%d')
            except ValueError:
                continue
            dumps.append(i.group('dump'))
        return sorted(dumps)

    def checkDumpDir(self, path, subject, date):
        """
        This function is used to check if the given dump directory is complete.

        - path (string): The path to the dump directory.
        - subject (string): The wiki database to check.
        - date (string): The date of the dump in %Y%m%d format.

        Returns: True if dump directory is complete, False if otherwise.
        """
        if (os.path.exists(path)):
            files = os.listdir(path)
        else:
            # The dump directory does not exist.
            # Exit the rest of the function and leave it to another day.
            self.common.giveDebugMessage("The dump file directory does not "
                                         "exist!")
            return False
        allfiles = self.getDumpFiles(subject, date)
        for dumpfile in allfiles:
            if (dumpfile in files):
                continue
            else:
                # The dump files on the local directory is incomplete.
                # Exit the rest of the function and leave it to another day.
                self.common.giveDebugMessage("The dump files in the local "
                                             "directory is incomplete!")
                return False
        return True

    def getItemsLeft(self, job=None):
        """
        This function is used for getting the number of items left to be done
        for a specific job.

        Note: The "update" job should not be using this!

        - job (string): The job to obtain the count for.

        Returns: Int with the number of items left to work on.
        """
        conds = {
            'progress': 'done'
        }
        if (job is None or job == "archive"):
            conds['is_archived'] = "0"
            conds['can_archive'] = "1"
            return self.sqldb.getItemsLeft(params=conds)
        elif (job == "check"):
            conds['is_archived'] = "1"
            conds['is_checked'] = "0"
            return self.sqldb.getItemsLeft(params=conds)
        else:
            return 0

    def getRandomItem(self, job=None):
        """
        This function is used for getting a random item to work on for a
        specific job.

        Returns: Dict with the information about the item to work on.
        """
        if (job is None or job == "archive"):
            itemdetails = self.sqldb.getRandomItem(dumptype="main",
                                                   archived=False,
                                                   debug=self.debug)
            output = {
                'subject': itemdetails['subject'],
                'date': itemdetails['date']
            }
        elif (job == "check"):
            itemdetails = self.sqldb.getRandomItem(dumptype="main",
                                                   archived=True,
                                                   debug=self.debug)
            output = {
                'subject': itemdetails['subject'],
                'date': itemdetails['date']
            }
        elif (job == "update"):
            output = {
                'subject': None,
                'date': None
            }
        else:
            output = {}
        return output

    def archive(self, subject, date, path=None, verbose=False, debug=False):
        """
        This function is for doing the actual archiving process.

        - subject (string): The wiki database to archive.
        - date (string): The date of the dump in %Y%m%d format.
        - path (string): The path to the dump directory.
        - verbose (boolean): Whether or not to increase verbosity.
        - debug (boolean): Whether or not to run in debug mode.

        Returns: True if process is successful, False if otherwise.
        """
        converter = balchivist.BALConverter()
        sitename = converter.getNameFromDB(subject, pretext=True)
        langname = converter.getNameFromDB(subject, format='language')
        project = converter.getNameFromDB(subject, format='project')
        datename = converter.getDateFromWiki(date)
        arcdate = converter.getDateFromWiki(date, archivedate=True)
        checksums = [
            'md5sums.txt',
            'sha1sums.txt'
        ]

        if (path is None):
            dumps = "%s/%s/%s" % (self.config.get('dumpdir'), subject, date)
        else:
            dumps = path
        if (self.checkDumpDir(dumps, subject, date)):
            pass
        else:
            # The dump directory is not suitable to be used, exit the function
            return False
        count = 0
        iaitem = balchivist.BALArchiver('%s-%s' % (subject, date))
        allfiles = self.getDumpFiles(subject, date)

        # If --resume is given, check which files are missing
        if self.resume:
            items = []
            iafiles = iaitem.getFileList()
            for dumpfile in allfiles:
                if dumpfile in iafiles:
                    continue
                else:
                    # The file does not exist in the Internet Archive item
                    items.append(dumpfile)
            if items == []:
                self.common.giveMessage("All files have already been uploaded")
                return True
        else:
            items = allfiles

        # Check if checksums are available and add them if they do
        for checksum in checksums:
            filename = "%s-%s-%s" % (subject, date, checksum)
            filepath = "%s/%s" % (dumps, filename)
            if os.path.exists(filepath):
                items.append(filename)
            else:
                continue

        os.chdir(dumps)
        for dumpfile in items:
            self.common.giveMessage("Uploading file: %s" % (dumpfile))
            time.sleep(1)  # For Ctrl+C
            if count == 0:
                metadata = {
                    "collection": self.config.get('collection'),
                    "creator": self.config.get('creator'),
                    "contributor": self.config.get('contributor'),
                    "mediatype": self.config.get('mediatype'),
                    "rights": self.config.get('rights'),
                    "subject": self.subject % (subject, langname, project),
                    "date": arcdate,
                    "licenseurl": self.config.get('licenseurl'),
                    "title": self.title % (sitename, datename),
                    "description": self.desc % (sitename, datename)
                }
                headers = {
                    'x-archive-size-hint': self.sizehint
                }
                upload = iaitem.uploadFile(dumpfile, metadata=metadata,
                                           headers=headers, debug=self.debug)
                # Allow the Internet Archive to process the item creation
                if debug:
                    pass
                else:
                    timenow = time.strftime("%Y-%m-%d %H:%M:%S",
                                            time.localtime())
                    self.common.giveMessage("Sleeping for 30 seconds, %s" %
                                            (timenow))
                    time.sleep(30)
            else:
                upload = iaitem.uploadFile(dumpfile, debug=debug)
            if upload:
                self.common.giveDebugMessage(upload)
                count += 1
            else:
                return False
        return True

    def check(self, subject, date):
        """
        This function checks if the uploaded dump is really complete.

        - subject (string): The wiki database to check.
        - date (string): The date of the dump in %Y%m%d format.

        Returns: True if complete, False if errors have occurred.
        """
        complete = True
        allfiles = self.getDumpFiles(subject, date)
        iaitem = balchivist.BALArchiver('%s-%s' % (subject, date))
        iafiles = iaitem.getFileList()
        self.common.giveMessage("Checking if all files are uploaded for %s "
                                "on %s" % (subject, date))
        params = {
            'type': 'main',
            'subject': subject,
            'date': date
        }
        for dumpfile in allfiles:
            if (dumpfile in iafiles):
                continue
            else:
                # The Internet Archive have got incomplete items
                complete = False
        return complete

    def update(self):
        """
        This function checks for new dumps and add new entries into the
        database.

        Returns: True if complete, Exception if an error occurred.
        """
        alldb = self.getDatabases('all.dblist')
        privatedb = self.getDatabases('private.dblist')
        # Remove all instances of private wikis
        for private in privatedb:
            alldb.remove(private)
        for db in alldb:
            dumps = self.getAllDumps(db)
            stored = self.sqldb.getAllDumps(db)
            inprogress = self.sqldb.getAllDumps(db, progress="progress")
            cannotarc = self.sqldb.getAllDumps(db, progress="done",
                                               can_archive=0)
            failed = self.sqldb.getAllDumps(db, progress="error")
            canarc = self.sqldb.getAllDumps(db, can_archive=1)
            # Step 1: Check if all new dumps are registered
            for dump in dumps:
                if (dump in stored):
                    self.common.giveMessage("Dump of %s on %s already in the "
                                            "database, skipping" % (db, dump))
                    continue
                else:
                    self.common.giveMessage("Adding new item %s on "
                                            "%s" % (db, dump))
                    progress = self.getDumpProgress(db, dump)
                    params = {
                        'type': 'main',
                        'subject': db,
                        'date': dump,
                        'progress': progress
                    }
                    self.sqldb.addNewItem(params=params)
            # Step 2: Check if the status of dumps in progress have changed
            for dump in inprogress:
                progress = self.getDumpProgress(db, dump)
                if (progress != 'progress'):
                    self.common.giveMessage("Updating dump progress for %s "
                                            "on %s" % (db, dump))
                    params = {
                        'type': 'main',
                        'subject': db,
                        'date': dump,
                        'progress': progress
                    }
                    self.sqldb.updateProgress(params=params)
                else:
                    continue
            # Step 3: Check if the dump is available for archiving
            for dump in cannotarc:
                dumpdir = "%s/%s/%s" % (self.config.get('dumpdir'), db, dump)
                if (self.checkDumpDir(dumpdir, db, dump)):
                    # The dump is now suitable to be archived
                    self.common.giveMessage("Updating can_archive for %s "
                                            "on %s" % (db, dump))
                    params = {
                        'type': 'main',
                        'subject': db,
                        'date': dump,
                        'can_archive': 1
                    }
                    self.sqldb.updateCanArchive(params=params)
                else:
                    continue
            # Step 4: Check if failed dumps really did fail or was restarted
            for dump in failed:
                progress = self.getDumpProgress(db, dump)
                if (progress != 'error' and progress != 'unknown'):
                    self.common.giveMessage("Updating dump progress for %s "
                                            "on %s" % (db, dump))
                    params = {
                        'type': 'main',
                        'subject': db,
                        'date': dump,
                        'progress': progress
                    }
                    self.sqldb.updateProgress(params=params)
                else:
                    continue
            # Step 5: Reset the can_archive statuses of old dumps
            for dump in canarc:
                dumpdir = "%s/%s/%s" % (self.config.get('dumpdir'), db, dump)
                if (self.checkDumpDir(dumpdir, db, dump)):
                    continue
                else:
                    # The dump is now unable to be archived automatically
                    self.common.giveMessage("Updating can_archive for %s on "
                                            "%s" % (db, dump))
                    params = {
                        'type': 'main',
                        'subject': db,
                        'date': dump,
                        'can_archive': 0
                    }
                    self.sqldb.updateCanArchive(params=params)
        return True

    def dispatch(self, job, subject, date, path):
        """
        This function is for dispatching an item to the various functions.
        """
        updatedetails = {
            'type': 'main',
            'subject': subject,
            'date': date
        }
        msg = "Running %s on the main Wikimedia database " % (job)
        msg += "dump of %s on %s" % (subject, date)
        self.common.giveMessage(msg)
        if (job == "archive"):
            status = self.archive(subject=subject, date=date, path=path,
                                  verbose=self.verbose, debug=self.debug)
            if (self.debug):
                return status
            elif (self.debug is False and status):
                self.common.giveMessage("Marking %s on %s as archived" %
                                        (subject, date))
                self.sqldb.markArchived(updatedetails)
            else:
                self.common.giveMessage("Marking %s on %s as failed"
                                        " archive" % (subject, date))
                self.sqldb.markFailedArchive(updatedetails)
        elif (job == "check"):
            status = self.check(subject=subject, date=date)
            if (self.debug):
                return status
            elif (self.debug is False and status):
                self.common.giveMessage("Marking %s on %s as checked" %
                                       (subject, date))
                self.sqldb.markChecked(updatedetails)
            else:
                self.common.giveMessage("Marking %s on %s as failed"
                                        " check" % (subject, date))
                self.sqldb.markFailedCheck(updatedetails)

    def execute(self, params={}):
        """
        This function is for the main execution of the module and is directly
        called by runner.py.

        - params (dict): Information about the item to work on, should contain
        "job", "subject", "date" and "path".

        Returns True if all required processing is successful, False if an
        error has occurred.
        """
        continuous = False
        if (params['job'] is None):
            # Set it to the default job, which is to archive
            job = "archive"
        else:
            job = params['job']

        path = params['path']
        subject = params['subject']
        date = params['date']

        # Process the given arguments and make sure that we get what we need
        if (job == "update"):
            return self.update()
        elif (subject is None and date is not None):
            self.common.giveError("Error: --date was given but not --subject")
            return False
        elif (subject is not None and date is None):
            self.common.giveError("Error: --subject was given but not --date")
            return False
        elif (job not in self.jobs):
            self.common.giveError("Error: %s is not a supported job!" % (job))
            return False
        elif (subject is None and date is None):
            continuous = True
        else:
            pass

        if (continuous):
            while self.getItemsLeft(job=job) > 0:
                itemdetails = self.getRandomItem(job=job)
                subject = itemdetails['subject']
                date = itemdetails['date']
                self.dispatch(job=job, subject=subject, date=date, path=path)
        else:
            self.dispatch(job=job, subject=subject, date=date, path=path)

        return True

if __name__ == "__main__":
    BALMessage = balchivist.BALMessage()
    IncorrectUsage = balchivist.exception.IncorrectUsage
    raise IncorrectUsage(BALMessage.getMessage('exception-incorrectusage'))
